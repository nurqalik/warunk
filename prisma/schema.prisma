// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String               @id @default(cuid())
    name          String?
    email         String?              @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    product       Product[]
    history       HistoryTransaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id                String              @id @default(cuid())
    name              String
    img               String
    price             Float
    stock             Int
    categoryId        String
    category          Category            @relation(fields: [categoryId], references: [id])
    detailTransaction DetailTransaction[]

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Category {
    id      String    @id @default(cuid())
    name    String
    product Product[]
}

model Transaction {
    id                 String               @id @default(cuid())
    transactionOrder   String
    currentStatus      Status
    total              Float
    customerName       String
    customerPhone      String
    detailTransaction  DetailTransaction[]
    createdDate        DateTime             @default(now())
    historyTransaction HistoryTransaction[]
}

model DetailTransaction {
    id            String      @id @default(cuid())
    quantity      Int
    subTotal      Float
    productId     String
    transactionId String
    product       Product     @relation(fields: [productId], references: [id])
    transaction   Transaction @relation(fields: [transactionId], references: [id])
}

model HistoryTransaction {
    id            String      @id @default(cuid())
    status        Status
    createDate    DateTime    @default(now())
    transactionId String
    userId        String
    transaction   Transaction @relation(fields: [transactionId], references: [id])
    user          User        @relation(fields: [userId], references: [id])
}

enum Status {
    NEW
    PROCESS
    DONE
}

enum Role {
    Admin
    Customer
}
